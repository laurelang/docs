Test Suite
*---*
Laurelang Test Suite - c logic environment for unit-testing needs. Supports fixtures and generators.
*---*
# Usage

Create all tests needed as predicates with names starting with `test_`.

```
: ?test_me().

?test_me() {
    2 + 2 = 4;
    2 + x = 4;
    &all x {
        x = 2;
    };
}
```

Run testing suite like this: 

```
laure @/test my_tests.le -norepl -signal -q "tests_run()"
```

Where my_tests.le is name of your package. The signal flag means that result of the query passed will determine the return code of the program.

If predicate fails, the test will not pass. Traceback and stack history is saved, so it's easy to debug.

The sample output will look like this:

```
(laurelang vX (c) timoniq)
  @/test: consulted
  my_tests.le: consulted
| tests_run()

(Running test suite v0.1)
(Collecting tests)
Collected 1 tests.
--- Running tests ---
test_me: passed
--- Showing results ---
----------------------
Succeed 1/1 (100%)
Time elapsed Ns
----------------------
  true
```

## Generators

When you want to test your system for multiple solutions you may use generators.<br>
Just declare all the needed relations which should be generated by the test predicate in the docstrings above it, each relation in one string.

When you have more than 1 argument in relation, split them by `;`. Don't use response arguments in test predicates.

```
// 1;2
// 3;5
: ?test_something(int, int).
?test_something(1, 2).
?test_something(3, 5).
```

When you want to ignore other solutions, create one more docstring with ellipsis - `...`.

## Skip tests

To skip some tests you may use `skip` dflag. If you have multiple tests to skip split them by the `,`. Example usage:

```
./laure @/test my_tests.le -q "tests_run()" -D skip=test_me
```

## Output mode

Is set with a dflag `mode`.

Modes:

`0`/`all` - Show all information (default)<br>
`1`/`results` - Show only results<br>
`2`/`nologs` - Logs won't be shown

# Limits

Maximum 256 tests per suite.